#version 450
#extension GL_EXT_debug_printf : enable
#define FLOAT_MAX 0x7f7fffff
#define NO_MATERIAL_ID 0xffffffff

struct Ray
{
	vec4 origin;
	vec4 direction;
	uint pixelXIndex;
	uint pixelYIndex;
};

layout(std430, set = 0, binding = 0) buffer in_rays
{
	Ray rays[];
} Rays;

struct Intersection
{
	vec4 ray_origin;
	vec4 ray_direction;
	vec4 intersection_location;
	vec4 intersection_normal;
	vec4 ray_color;
	float depth;
	uint object_id;
	uint face_id;
	uint material_id;
	int material_index;
};

layout(std430, set = 0, binding = 1) buffer out_intersections
{
	Intersection intersections[];
} Intersections;

// Work group layout
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint gID = gl_GlobalInvocationID.x;

#ifdef DEBUG
	if(gID == 0)
	{
		debugPrintfEXT("World Intersection: %u, %u", Rays.rays.length(), Intersections.intersections.length());
	}
#endif
	
	if (gID >= Rays.rays.length())
	{
		return;
	}
	
	// If the ray is inactive don't do anything
	if(Rays.rays[gID].direction.x == 0 && Rays.rays[gID].direction.y == 0 && Rays.rays[gID].direction.z == 0)
	{
		Intersections.intersections[gID].material_id = NO_MATERIAL_ID;
		Intersections.intersections[gID].depth = 0;
		return;
	}

	Intersections.intersections[gID].ray_origin = Rays.rays[gID].origin;
	Intersections.intersections[gID].ray_direction = Rays.rays[gID].direction;
	Intersections.intersections[gID].intersection_location = vec4(0);
	Intersections.intersections[gID].intersection_normal = vec4(0);
	Intersections.intersections[gID].depth = FLOAT_MAX;
	Intersections.intersections[gID].material_id = 0;
	Intersections.intersections[gID].material_index = 0;
}
