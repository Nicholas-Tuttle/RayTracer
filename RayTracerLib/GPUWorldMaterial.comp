#version 450
#extension GL_EXT_debug_printf : enable

layout (push_constant) uniform material_data
{
	uint ID;
} MaterialData;

struct Intersection
{
	vec4 ray_origin;
	vec4 ray_direction;
	vec4 intersection_location;
	vec4 intersection_normal;
	vec4 ray_color;
	float depth;
	uint object_id;
	uint face_id;
	uint material_id;
	int material_index;
};

layout(std430, set = 0, binding = 0) buffer in_intersections
{
	Intersection intersections[];
} Intersections;

struct Ray
{
	vec4 origin;
	vec4 direction;
	uint pixelXIndex;
	uint pixelYIndex;
};

layout(std430, set = 0, binding = 1) buffer out_resultant_rays
{
	Ray rays[];
} Rays;

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint gID = gl_GlobalInvocationID.x;
	
#ifdef DEBUG
	if(gID == 0)
	{
		debugPrintfEXT("GPU World Material: %u, %u", Rays.rays.length(), Intersections.intersections.length());
	}
#endif
	
	if (gID >= Intersections.intersections.length())
	{
		return;
	}
	
	if(Intersections.intersections[gID].material_id != MaterialData.ID)
	{
		return;
	}

	if(Intersections.intersections[gID].ray_direction.y > 0)
	{
		vec4 horizon_color = vec4(vec3(0.53f, 0.81f, 0.92f) * 2.0f, 1.0f);
		vec4 sky_color = vec4(vec3(0.36f, 0.45f, 0.92f) * 2.0f, 1.0f);

		float sky_gradient_lerp = pow(smoothstep(0.0f, 0.4f, Intersections.intersections[gID].ray_direction.y), 0.35);
		vec4 sky_gradient = mix(horizon_color, sky_color, sky_gradient_lerp);

		vec3 direction_to_sun = normalize(vec3(1.0f, 0.75f, -0.2f));
		float sun_power = pow(dot(Intersections.intersections[gID].ray_direction.xyz, direction_to_sun), 3.0f);

		float sun_mask = float(sun_power >= 0.997f);
		vec4 sun_color = vec4(vec3(1.0f, 0.72f, 0.07f) * 10, 1.0f);

		Intersections.intersections[gID].ray_color *= (sky_gradient + sun_mask * sun_color);
	}
	else
	{
		vec4 ground_color = vec4(0.62f, 0.44f, 0.27f, 1.0f);
		Intersections.intersections[gID].ray_color *= ground_color;
	}

	// Mark the ray as inactive
	Rays.rays[gID].origin = vec4(0);
	Rays.rays[gID].direction = vec4(0);
}
