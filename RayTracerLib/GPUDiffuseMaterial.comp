// glslangValidator.exe -V -e main %(FullPath) -o $(OutDir)\..\bin\%(Filename).comp.spv

#version 450
#extension GL_EXT_debug_printf : enable

//	Incoming shader data
//		this material ID
//	Incoming data for rays
//		intersection location, direction, material ID, (eventualy object ID too)
//	Outgoing data for rays
//		origin, direction, color

layout (push_constant) uniform material_data
{
	uint ID;
} MaterialData;

struct Intersection
{
	vec4 ray_origin;
	vec4 ray_direction;
	vec4 intersection_location;
	vec4 intersection_normal;
	vec4 ray_color;
	float depth;
	uint object_id;
	uint face_id;
	uint material_id;
};

layout(std430, set = 0, binding = 0) buffer in_intersections
{
	Intersection intersections[];
} Intersections;

struct Ray
{
	vec4 origin;
	vec4 direction;
	uint pixelXIndex;
	uint pixelYIndex;
};

layout(std430, set = 0, binding = 1) buffer out_resultant_rays
{
	Ray rays[];
} Rays;

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint gID = gl_GlobalInvocationID.x;

	if(gID == 0)
	{
		debugPrintfEXT("GPU Diffuse Material: %u, %u", Rays.rays.length(), Intersections.intersections.length());
	}
	
	if (gID > Intersections.intersections.length())
	{
		return;
	}
	
	if(Intersections.intersections[gID].material_id != MaterialData.ID)
	{
		return;
	}

	Intersections.intersections[gID].ray_color *= vec4(0.8f, 0.8f, 0.8f, 1.0f);// * vec4(Intersections.intersections[gID].intersection_normal.xyz, 1.0f);
	
	Rays.rays[gID].origin = Intersections.intersections[gID].intersection_location;
	Rays.rays[gID].direction = Intersections.intersections[gID].intersection_normal;
}
