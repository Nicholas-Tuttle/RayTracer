// glslangValidator.exe -V -e main %(FullPath) -o $(OutDir)\..\bin\%(Filename).comp.spv

// TODO: this could be threaded per-ray per-object

#version 450
#extension GL_EXT_debug_printf : enable

//	Incoming data
//		origin, direction, pixel
//		sphere data
//	Outgoing data
//		intersection location, normal, material ID, (eventualy object ID too)

struct Ray
{
	vec4 origin;
	vec4 direction;
	uint pixelXIndex;
	uint pixelYIndex;
};

layout(std430, set = 0, binding = 0) buffer in_rays
{
	Ray rays[];
} Rays;

struct Intersection
{
	vec4 ray_origin;
	vec4 ray_direction;
	vec4 intersection_location;
	vec4 intersection_normal;
	vec4 ray_color;
	float depth;
	uint object_id;
	uint face_id;
	uint material_id;
	uint pixelXIndex;
	uint pixelYIndex;
};

layout(std430, set = 0, binding = 1) buffer out_intersections
{
	Intersection intersections[];
} Intersections;

struct Sphere
{
	vec4 position;
	float radius;
	uint material_id;
};

layout(std430, set = 0, binding = 2) buffer in_spheres
{
	Sphere spheres[];
} Spheres;

struct RayIntersectionInfo
{
	bool intersects;
	vec3 location;
	vec3 normal;
	float depth;
	uint material_id;
};

RayIntersectionInfo ray_intersects_sphere(Ray ray, Sphere sphere)
{
	RayIntersectionInfo info;
	info.intersects = false;
	info.normal = vec3(0.0);
	info.depth = 0;
	info.material_id = 0;

	vec3 sphere_position = sphere.position.xyz;

	vec3 line_origin_to_sphere_center_O_minus_C = sphere_position - ray.origin.xyz;
	float u_dot = dot(line_origin_to_sphere_center_O_minus_C, normalize(ray.direction.xyz));

	float dot_squared = u_dot * u_dot;
	float magnitude_squared = dot(line_origin_to_sphere_center_O_minus_C, line_origin_to_sphere_center_O_minus_C);
	float radius_squared = sphere.radius * sphere.radius;
	
	float delta = dot_squared + radius_squared - magnitude_squared;
	
	if (delta < 0)
	{
		return info;
	}

	// The closest depth has to be the "minus" term of the "plus or minus" square-root since delta is always positive
	float depth = u_dot - sqrt(delta);
	
	// If the depth is negative either only the backwards ray intersects, or it is a backface from starting in the sphere
	if (depth < 0)
	{
		return info;
	}

	info.intersects = true;

	vec3 intersection_location = ray.origin.xyz + normalize(ray.direction.xyz) * depth;
	vec3 intersection_normal = normalize((intersection_location - sphere_position));

	info.location = intersection_location;
	info.normal = intersection_normal;
	info.depth = depth;
	info.material_id = sphere.material_id;

	return info;
}

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint gID = gl_GlobalInvocationID.x;

	if(gID == 0)
	{
		debugPrintfEXT("Sphere Intersection: %u, %u, %u", Rays.rays.length(), Intersections.intersections.length(), Spheres.spheres.length());
		if(Spheres.spheres.length() > 0)
		{
			debugPrintfEXT("Sphere 0 data: [%3.2v4f], %f, %u", Spheres.spheres[0].position, Spheres.spheres[0].radius, Spheres.spheres[0].material_id);
		}
	}
	
	if (gID > Rays.rays.length())
	{
		return;
	}
	
	for(int i = 0; i < Spheres.spheres.length(); i++)
	{
		RayIntersectionInfo info = ray_intersects_sphere(Rays.rays[gID], Spheres.spheres[i]);
		
		if(info.intersects && info.depth < Intersections.intersections[gID].depth)
		{
			// Fill in all the intersection info
			Intersections.intersections[gID].depth = info.depth;
			Intersections.intersections[gID].intersection_location = vec4(info.location, 0.0);
			Intersections.intersections[gID].intersection_normal = vec4(info.normal, 0.0);
			Intersections.intersections[gID].material_id = info.material_id;
		}
	}
}
